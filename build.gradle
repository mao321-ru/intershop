plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.example'
version = '0.0.2-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// временное исключение исходников из компиляции (для поэтапного рефакторинга на Reactive Stack)
sourceSets {
    main {
        java {
            exclude 'org/example/intershop/controller/CartController.java'
            exclude 'org/example/intershop/controller/MainController.java'
            exclude 'org/example/intershop/controller/OrderController.java'
            exclude 'org/example/intershop/controller/ProductCartAction.java'
            exclude 'org/example/intershop/controller/ProductController.java'
            exclude 'org/example/intershop/controller/ProductSort.java'
            exclude 'org/example/intershop/dto/OrderDto.java'
            exclude 'org/example/intershop/dto/OrderProductDto.java'
            exclude 'org/example/intershop/dto/ProductCreateDto.java'
            exclude 'org/example/intershop/dto/ProductUpdateDto.java'
            exclude 'org/example/intershop/mapper/OrderMapper.java'
            exclude 'org/example/intershop/model/CartProduct.java'
            exclude 'org/example/intershop/model/Image.java'
            exclude 'org/example/intershop/model/Order.java'
            exclude 'org/example/intershop/model/OrderProduct.java'
            exclude 'org/example/intershop/repository/CartProductRepository.java'
            exclude 'org/example/intershop/repository/OrderRepository.java'
            exclude 'org/example/intershop/service/CartService.java'
            exclude 'org/example/intershop/service/CartServiceImpl.java'
            exclude 'org/example/intershop/service/OrderService.java'
            exclude 'org/example/intershop/service/OrderServiceImpl.java'
        }
    }
    test {
        java {
            exclude 'org/example/intershop/controller/CartControllerTest.java'
            exclude 'org/example/intershop/controller/MainControllerTest.java'
            exclude 'org/example/intershop/controller/OrderControllerTest.java'
            exclude 'org/example/intershop/controller/ProductControllerTest.java'
        }
    }
}



configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:r2dbc'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Собираем исполняемый jar-файл
bootJar {
    launchScript()
}

tasks.named('test') {
    useJUnitPlatform()
    // выполняем тесты даже при отсутствии изменений
    outputs.upToDateWhen { false }
    // подробный вывод по выполнявшимся тестам в консоль
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }

    //// вывод списка failed тестов в консоль после их выполнения
    // (https://stackoverflow.com/questions/43917709/how-do-i-show-a-list-of-all-the-test-failures-after-completion-of-a-gradle-task)
    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("\n*** FAILED tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
    ////
}
