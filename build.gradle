plugins {
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.12.0'
}

subprojects {
    group = 'com.example'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.openapi.generator'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    // Собираем исполняемый jar-файл
    bootJar {
        launchScript()
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
        // выполняем тесты даже при отсутствии изменений
        outputs.upToDateWhen { false }
        // подробный вывод по выполнявшимся тестам в консоль
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }

        //// вывод списка failed тестов в консоль после их выполнения
        // (https://stackoverflow.com/questions/43917709/how-do-i-show-a-list-of-all-the-test-failures-after-completion-of-a-gradle-task)
        // a collection to track failedTests
        ext.failedTests = []

        afterTest { descriptor, result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                String failedTest = "${descriptor.className}::${descriptor.name}"
                logger.debug("Adding " + failedTest + " to failedTests...")
                failedTests << [failedTest]
            }
        }

        afterSuite { suite, result ->
            if (!suite.parent) { // will match the outermost suite
                // logs each failed test
                if (!failedTests.empty) {
                    logger.lifecycle("\n*** FAILED tests:")
                    failedTests.each { failedTest ->
                        logger.lifecycle("${failedTest}")
                    }
                }
            }
        }
        ////
    }

}
